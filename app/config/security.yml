#security:
#    encoders:
#        Zerodine\Bundle\MakeSomeoneHappyBundle\Entity\Person:
#            algorithm: bcrypt
#            cost: 12
#
#    role_hierarchy:
#        ROLE_ADMIN:       ROLE_USER
#        ROLE_SUPER_ADMIN: ROLE_ADMIN
#
#    providers:
#        user_provider:
#            id: platform.person.provider
#
#
#    firewalls:
#        dev:
#            pattern:  ^/(_(profiler|wdt)|css|images|js)/
#            security: false
#
#        login:
#            pattern:  ^/demo/secured/login$
#            security: false
#
#
#        oauth_token:
#            pattern:    ^/oauth/v2/token
#            security:   false
#
#        oauth_authorize:
#            pattern:    ^/oauth/v2/auth
#            anonymous: ~
#            form_login:
#                provider: user_provider
#                login_path: login
#                check_path: login_check
#            logout:
#                path: logout
#
#        api:
#            pattern:    ^/api
#            fos_oauth:  true
#            stateless:  true
#
#        secured_area:
#            #pattern:    ^/demo/secured/
#            pattern:    ^/
#            form_login:
#                provider: user_provider
#                check_path: login_check
#                login_path: login
#            logout:
#                path:   logout
#                #target: _demo
#            anonymous: ~
#            #http_basic:
#            #    realm: "Secured Demo Area"
#
#    access_control:
#        - { path: ^/register, roles: IS_AUTHENTICATED_ANONYMOUSLY }
#        - { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
#        - { path: ^/login_check, roles: IS_AUTHENTICATED_ANONYMOUSLY }
#        - { path: ^/api, roles: [ IS_AUTHENTICATED_FULLY ] }


security:
    encoders:
        Zerodine\Bundle\MakeSomeoneHappyBundle\Entity\Person:
            algorithm: bcrypt
            cost: 12

    role_hierarchy:
        ROLE_ADMIN:       ROLE_USER
        ROLE_SUPER_ADMIN: ROLE_ADMIN

    providers:
        user_provider:
            id: platform.person.provider


    firewalls:
        api:
            pattern:    ^/api
            fos_oauth:  true
            stateless:  true

        dev:
            pattern:  ^/(_(profiler|wdt)|css|images|js)/
            security: false

#        login:
#            pattern:  ^/demo/secured/login$
#            security: false


        oauth_token:
            pattern:    ^/oauth/v2/token
            security:   false

        secured_area:
            #pattern:    ^/demo/secured/
            pattern:    ^/
            form_login:
                provider: user_provider
                check_path: login_check
                login_path: login
            logout:
                path:   logout
                target: login
            anonymous: ~
            #http_basic:
            #    realm: "Secured Demo Area"

        oauth_authorize:
            pattern:    ^/oauth/v2/auth
            form_login:
                provider: user_provider
                check_path: login_check
                login_path: login
            anonymous: true

    access_control:
        # You can omit this if /api can be accessed both authenticated and anonymously
        # - { path: ^/register, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        # - { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        # - { path: ^/login_check, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        # - { path: ^/, roles: [ IS_AUTHENTICATED_ANONYMOUSLY]}
        - { path: ^/api, roles: [ IS_AUTHENTICATED_FULLY ] }
        #- { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY, requires_channel: https }